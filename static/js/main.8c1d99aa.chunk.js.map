{"version":3,"sources":["components/Nav/Nav.js","data/photos.js","components/PhotoGallery/PhotoGallery.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","photos","src","width","height","PhotoGallery","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yIAGaA,G,kBAAM,WACf,OACI,yBAAKC,UAAW,iBACZ,yBAAKA,UAAW,eACZ,wBAAIA,UAAW,QAAf,U,wBCPHC,EAAS,CAClB,CACIC,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,GAEZ,CACIF,IAAK,kDACLC,MAAO,EACPC,OAAQ,I,QCvCHC,EAAe,WAAO,IAAD,EACUC,mBAAS,GADnB,mBACvBC,EADuB,KACTC,EADS,OAEUF,oBAAS,GAFnB,mBAEvBG,EAFuB,KAETC,EAFS,KAIxBC,EAAeC,uBAAY,SAACC,EAAD,GAA2B,EAAlBC,MAAmB,IAAZC,EAAW,EAAXA,MAC7CP,EAAgBO,GAChBL,GAAgB,KACjB,IAQH,OACI,6BACI,kBAAC,IAAD,CAAST,OAAQA,EAAQe,QAASL,IAClC,kBAAC,IAAD,KACKF,EACG,kBAAC,IAAD,CAAOQ,QAXD,WAClBT,EAAgB,GAChBE,GAAgB,KAUA,kBAAC,IAAD,CACIQ,aAAcX,EACdY,MAAOlB,EAAOmB,KAAI,SAAAC,GAAC,kCACZA,GADY,IAEfC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIvB,QCjBLC,MAbf,WACI,OACI,yBAAK1B,UAAU,OACX,kBAAC,EAAD,MACA,yBAAKA,UAAW,aACZ,wBAAIA,UAAW,QAAf,iBACA,mEACA,kBAAC,EAAD,SCAI2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8c1d99aa.chunk.js","sourcesContent":["import React from \"react\";\nimport './Nav.scss';\n\nexport const Nav = () => {\n    return (\n        <div className={'nav-container'}>\n            <div className={'nav-content'}>\n                <h1 className={'logo'}>LF</h1>\n            </div>\n        </div>\n    )\n}\n","export const photos = [\n    {\n        src: \"https://source.unsplash.com/2ShvY8Lf6l0/800x599\",\n        width: 4,\n        height: 3\n    },\n    {\n        src: \"https://source.unsplash.com/Dm-qxdynoEc/800x799\",\n        width: 1,\n        height: 1\n    },\n    {\n        src: \"https://source.unsplash.com/qDkso9nvCg0/600x799\",\n        width: 3,\n        height: 4\n    },\n    {\n        src: \"https://source.unsplash.com/iecJiKe_RNg/600x799\",\n        width: 3,\n        height: 4\n    },\n    {\n        src: \"https://source.unsplash.com/epcsn8Ed8kY/600x799\",\n        width: 3,\n        height: 4\n    },\n    {\n        src: \"https://source.unsplash.com/NQSWvyVRIJk/800x599\",\n        width: 4,\n        height: 3\n    },\n    {\n        src: \"https://source.unsplash.com/zh7GEuORbUw/600x799\",\n        width: 3,\n        height: 4\n    },\n    {\n        src: \"https://source.unsplash.com/PpOHJezOalU/800x599\",\n        width: 4,\n        height: 3\n    },\n    {\n        src: \"https://source.unsplash.com/I1ASdgphUH4/800x599\",\n        width: 4,\n        height: 3\n    }\n];\n","import React, {useCallback, useState} from \"react\";\nimport Gallery from \"react-photo-gallery\";\nimport {photos} from \"../../data/photos\";\nimport Carousel, {Modal, ModalGateway} from \"react-images\";\n\nexport const PhotoGallery = () => {\n    const [currentImage, setCurrentImage] = useState(0);\n    const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n    const openLightbox = useCallback((event, {photo, index}) => {\n        setCurrentImage(index);\n        setViewerIsOpen(true);\n    }, [])\n\n    const closeLightbox = () => {\n        setCurrentImage(0);\n        setViewerIsOpen(false);\n    };\n\n\n    return (\n        <div>\n            <Gallery photos={photos} onClick={openLightbox}/>\n            <ModalGateway>\n                {viewerIsOpen ? (\n                    <Modal onClose={closeLightbox}>\n                        <Carousel\n                            currentIndex={currentImage}\n                            views={photos.map(x => ({\n                                ...x,\n                                srcset: x.srcSet,\n                                caption: x.title\n                            }))}\n                        />\n                    </Modal>\n                ) : null}\n            </ModalGateway>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.scss';\nimport {Nav} from \"./components/Nav/Nav\";\nimport {PhotoGallery} from \"./components/PhotoGallery/PhotoGallery\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Nav/>\n            <div className={'container'}>\n                <h1 className={'name'}>Lucila Forman</h1>\n                <p>Fotograf√≠a 2020 - Catedra Trilnik</p>\n                <PhotoGallery/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}